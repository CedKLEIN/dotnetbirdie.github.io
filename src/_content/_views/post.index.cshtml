@{
    Layout = "_Layout";
}
<div>
    <div style="background-color:#3F3682;">
        <div class="container">
            <div class="row pb-2 pt-2">
                <div class="col-sm-12 col-md-10 herocontent" style="background-color:#3F3682;">
                    <h1 style="color:#E7E4FB;" class="herotitle text-md-left">
                        @(Model.Document.Header.Attributes.TryGetValue("paginationAttributeValue", out string val) &&
                            val.Length > 0 ? val : "Posts")</h1>
                    <p style="color:#E7E4FB;" class="herotext text-md-left">
                        @Model.Document.Header.Title</p>
                </div>
            </div>
        </div>
    </div>
    @if (Model.Context.Pages.Count == 0)
    {
        <div class="w-100 pt-4 pb-4 fw-bolder fst-italic fs-5 ps-2" style="background-color: white;">
            No post found.
        </div>
    }
    @foreach (var post in Model.Context.Pages)
    {
        var attributes = post.Document.Header.Attributes;

        var tags = attributes.TryGetValue("tags", out string tagValues) ?
        tagValues.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries) :
        Array.Empty<string>();

        var author = attributes["author"];
        var authorDisplayName = attributes.TryGetValue("author-displayName", out string dn) ? dn : author;
        var postImage = attributes.TryGetValue("post-image", out string pi) ? pi : "/img/default-post.png";

        <article class="post">
            <div class="card w-100 p-2 mt-2">
                <div class="card-body d-flex">
                    <div class="d-none d-sm-block pe-4">
                        <img style="max-height: 204px; object-fit: scale-down; border-radius: 0.5rem;"
                            src="@postImage"
                            class="card-img-top" alt="...">
                    </div>
                    <div>
                        <h5 class="card-title" style="color: #005da6;line-height: 26px;: 1.25rem;text-decoration: none;">
                            <a href="/@(post.Slug).html">@post.Document.Header.Title</a>
                        </h5>
                        <div style="font-size: 1rem;text-decoration: none;">@post.PublishedOn</div>
                        <div class="pt-2">
                            <img width="36" height="36" src="@(post.Gravatar)&s=36" class="w-auto card-img-top"
                                alt="@author" style="border-radius: 100px;">
                            <a href="/blog/author/@author/1.html"
                                style="color: #005da6;font-weight: 600;text-decoration: none;">@authorDisplayName</a>
                        </div>
                        <p class="pt-2 card-text">@attributes["summary"]</p>

                        @if (tags.Length > 0)
                        {
                            <hr />
                            @foreach (var tag in tags)
                            {
                                <a href="/blog/tag/@tag/1.html"
                                    style="background-color: #f2f2f2;color: #005da6;font-size: 14px;text-decoration: none;"
                                    class="p-2">@tag</a>
                            }
                        }
                    </div>
                </div>
        </article>
    }

    @{
        int totalPages = int.Parse(Model.Document.Header.Attributes.TryGetValue("paginationTotalPages", out string tp) ? tp
        : "0");
        int currentPage = int.Parse(Model.Document.Header.Attributes.TryGetValue("paginationCurrentPage", out string cp) ?
        cp : "0");
    }
    @if (totalPages > 0)
    {
        <nav class="pagination-container pt-4" aria-label="Posts pagination">
            <ul class="pagination justify-content-center">
                @{
                    await IncludeAsync("_PaginationItem.cshtml", new
                    {
                        Page = 1,
                        Current = 1 == currentPage
                    });
                }
                @if (1 < currentPage - 3)
                {
                    <li class="page-item">
                        <span href="@(Model.Page).html" class="page-link">
                            ...
                        </span>
                    </li>
                }
                @for (int i = Math.Max(2, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    await IncludeAsync("_PaginationItem.cshtml", new
                    {
                        Page = i,
                        Current = i == currentPage
                    });
                }
                @if (totalPages > currentPage + 3)
                {
                    <li class="page-item">
                        <span href="@(Model.Page).html" class="page-link">
                            ...
                        </span>
                    </li>
                }
                @if (totalPages > currentPage + 2)
                {
                    await IncludeAsync("_PaginationItem.cshtml", new
                    {
                        Page = totalPages,
                        Current = totalPages == currentPage
                    });
                }
            </ul>
        </nav>
    }
</div>
